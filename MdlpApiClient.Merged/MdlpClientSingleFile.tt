<#@ template language="C#" hostSpecific="true" debug="True" #>
<#@ output extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="EnvDte" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System" #>
<#
 /***************************************************************************************************
 This T4 template merges all *.cs files into one large file.
 It's based on this template: https://gist.github.com/niaher/bfa87f0aeda1204091fe
 ***************************************************************************************************/

  var projectName = "MdlpApiClient";
#>
/// <remarks>
/// This file contains the single-file version of the <#= projectName #> project, generated automatically.
/// </remarks>
<#
  var visualStudio = (this.Host as IServiceProvider).GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
  var project = visualStudio.Solution.Projects.OfType<EnvDTE.Project>().FirstOrDefault(p => p.Name == projectName);
  if (project == null)
  {
    return "";
  }

  var projectItems = GetProjectItemsRecursively(project.ProjectItems);

  foreach (var item in projectItems.Where(i => i.EndsWith(".cs")).OrderBy(i => i))
  {
     var text = File.ReadAllText(item).Trim();
     WriteLine(text + Environment.NewLine);
  }
#>
<#+
	public List<string> GetProjectItemsRecursively(EnvDTE.ProjectItems items)
	{
		var ret = new List<string>();
		if (items == null) return ret;

		foreach(EnvDTE.ProjectItem item in items)
		{
			string result = item.FileNames[1].Replace("\\", "/");

			// If not folder.
			if (result[result.Length - 1] != '\\')
			{
				ret.Add(result);
			}

			ret.AddRange(GetProjectItemsRecursively(item.ProjectItems));
		}

		return ret;
	}
#>
